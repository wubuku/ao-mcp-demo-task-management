-- <autogenerated>
--   This file was generated by dddappp code generator.
--   Any changes made to this file manually will be lost next time the file is regenerated.
-- </autogenerated>

local task = {}

local ERRORS = {
}

task.ERRORS = ERRORS


--- Creates a new Task state.
--
-- @param title string Task title
-- @param description string Task description
-- @param priority string Task priority
-- @param assignee string Person assigned to the task
-- @param due_date number Due date timestamp
-- @param status string Current task status
-- @param tags table (Tag list). Task tags
-- @return table A new state table representing the Task.
function task.new(title, description, priority, assignee, due_date, status, tags)
    local state = {
        version = 0,
        Title = title,
        Description = description,
        Priority = priority,
        Assignee = assignee,
        DueDate = due_date,
        Status = status,
        Tags = tags,
    }
    return state
end

--- Creates a new TaskCreated event.
-- @param task_id table The TaskId of the Task
-- @param _state table The current state of the Task
-- @param title string 
-- @param description string 
-- @param priority string 
-- @param assignee string 
-- @param due_date number 
-- @param tags table 
-- @return table
function task.new_task_created(task_id, _state, title, description, priority, assignee, due_date, tags)
    local event = {}
    event.event_type = "TaskCreated"
    event.task_id = task_id
    event.version = _state and _state.version or nil
    event.title = title
    event.description = description
    event.priority = priority
    event.assignee = assignee
    event.due_date = due_date
    event.tags = tags
    return event
end

--- Creates a new TaskUpdated event.
-- @param _state table The current state of the Task
-- @param title string 
-- @param description string 
-- @param priority string 
-- @param assignee string 
-- @param due_date number 
-- @param tags table 
-- @return table
function task.new_task_updated(_state, title, description, priority, assignee, due_date, tags)
    local event = {}
    event.event_type = "TaskUpdated"
    event.task_id = _state.task_id
    event.version = _state.version
    event.title = title
    event.description = description
    event.priority = priority
    event.assignee = assignee
    event.due_date = due_date
    event.tags = tags
    return event
end

--- Creates a new TaskStarted event.
-- @param _state table The current state of the Task
-- @return table
function task.new_task_started(_state)
    local event = {}
    event.event_type = "TaskStarted"
    event.task_id = _state.task_id
    event.version = _state.version
    return event
end

--- Creates a new TaskCompleted event.
-- @param _state table The current state of the Task
-- @return table
function task.new_task_completed(_state)
    local event = {}
    event.event_type = "TaskCompleted"
    event.task_id = _state.task_id
    event.version = _state.version
    return event
end

--- Creates a new TaskCancelled event.
-- @param _state table The current state of the Task
-- @return table
function task.new_task_cancelled(_state)
    local event = {}
    event.event_type = "TaskCancelled"
    event.task_id = _state.task_id
    event.version = _state.version
    return event
end

--- Creates a new TaskCreated event.
-- @param task_id table The TaskId of the Task
-- @param title string 
-- @param description string 
-- @param priority string 
-- @param assignee string 
-- @param due_date number 
-- @param status string 
-- @param tags table 
-- @param created_at number Creation timestamp
-- @param updated_at number Last update timestamp
-- @return table
function task.new_task_created(task_id, title, description, priority, assignee, due_date, status, tags, created_at, updated_at)
    local event = {}
    event.event_type = "TaskCreated"
    event.task_id = task_id
    event.title = title
    event.description = description
    event.priority = priority
    event.assignee = assignee
    event.due_date = due_date
    event.status = status
    event.tags = tags
    event.created_at = created_at
    event.updated_at = updated_at
    return event
end

--- Creates a new TaskUpdated event.
-- @param _state table The current state of the Task
-- @param title string 
-- @param description string 
-- @param priority string 
-- @param assignee string 
-- @param due_date number 
-- @param status string 
-- @param tags table 
-- @return table
function task.new_task_updated(_state, title, description, priority, assignee, due_date, status, tags)
    local event = {}
    event.event_type = "TaskUpdated"
    event.task_id = _state.task_id
    event.version = _state.version
    event.title = title
    event.description = description
    event.priority = priority
    event.assignee = assignee
    event.due_date = due_date
    event.status = status
    event.tags = tags
    return event
end

return task
