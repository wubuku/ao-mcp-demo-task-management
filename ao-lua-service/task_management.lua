-- <autogenerated>
--   This file was generated by dddappp code generator.
--   Any changes made to this file manually will be lost next time the file is regenerated.
-- </autogenerated>

TaskTable = TaskTable and (
    function(old_data)
        -- May need to migrate old data
        return old_data
    end
)(TaskTable) or {}

TaskIdSequence = TaskIdSequence and (
    function(old_data)
        -- May need to migrate old data
        return old_data
    end
)(TaskIdSequence) or { 0 }


SagaInstances = SagaInstances and (
    function(old_data)
        -- May need to migrate old data
        return old_data
    end
)(SagaInstances) or {}

SagaIdSequence = SagaIdSequence and (
    function(old_data)
        -- May need to migrate old data
        return old_data
    end
)(SagaIdSequence) or { 0 }


local json = require("json")
local entity_coll = require("entity_coll")
local messaging = require("messaging")
local saga = require("saga")
local task_id = require("task_id")
local task_aggregate = require("task_aggregate")

task_aggregate.init(TaskTable, TaskIdSequence)

saga.init(SagaInstances, SagaIdSequence)


local function get_task(msg, env, response)
    local status, result = pcall((function()
        local _task_id = json.decode(msg.Data)
        local _key = json.encode(task_id.to_key_array(_task_id))
        local _state = entity_coll.get(TaskTable, _key)
        return _state
    end))
    messaging.respond(status, result, msg)
end

local function create_task(msg, env, response)
    local status, result, commit = pcall((function()
        local cmd = json.decode(msg.Data)
        return task_aggregate.create_task(cmd, msg, env)
    end))
    messaging.handle_response_based_on_tag(status, result, commit, msg)
end

local function update_task(msg, env, response)
    local status, result, commit = pcall((function()
        local cmd = json.decode(msg.Data)
        return task_aggregate.update_task(cmd, msg, env)
    end))
    messaging.handle_response_based_on_tag(status, result, commit, msg)
end

local function start_task(msg, env, response)
    local status, result, commit = pcall((function()
        local cmd = json.decode(msg.Data)
        return task_aggregate.start_task(cmd, msg, env)
    end))
    messaging.handle_response_based_on_tag(status, result, commit, msg)
end

local function complete_task(msg, env, response)
    local status, result, commit = pcall((function()
        local cmd = json.decode(msg.Data)
        return task_aggregate.complete_task(cmd, msg, env)
    end))
    messaging.handle_response_based_on_tag(status, result, commit, msg)
end

local function cancel_task(msg, env, response)
    local status, result, commit = pcall((function()
        local cmd = json.decode(msg.Data)
        return task_aggregate.cancel_task(cmd, msg, env)
    end))
    messaging.handle_response_based_on_tag(status, result, commit, msg)
end

local function create_task(msg, env, response)
    local status, result, commit = pcall((function()
        local cmd = json.decode(msg.Data)
        return task_aggregate.create(cmd, msg, env)
    end))
    messaging.handle_response_based_on_tag(status, result, commit, msg)
end

local function update_task(msg, env, response)
    local status, result, commit = pcall((function()
        local cmd = json.decode(msg.Data)
        return task_aggregate.update(cmd, msg, env)
    end))
    messaging.handle_response_based_on_tag(status, result, commit, msg)
end

Handlers.add(
    "get_task",
    Handlers.utils.hasMatchingTag("Action", "GetTask"),
    get_task
)

Handlers.add(
    "get_task_count",
    Handlers.utils.hasMatchingTag("Action", "GetTaskCount"),
    function(msg, env, response)
        local count = 0
        for _ in pairs(TaskTable) do
            count = count + 1
        end
        messaging.respond(true, count, msg)
    end
)

Handlers.add(
    "get_task_table_keys",
    Handlers.utils.hasMatchingTag("Action", "GetTaskTableKeys"),
    function(msg, env, response)
        local keys = {}
        local n = 0
        for k, v in pairs(TaskTable) do
            n = n + 1
            keys[n] = k
        end
        messaging.respond(true, keys, msg)
    end
)

Handlers.add(
    "get_task_id_sequence",
    Handlers.utils.hasMatchingTag("Action", "GetTaskIdSequence"),
    function(msg, env, response)
        messaging.respond(true, TaskIdSequence, msg)
    end
)

Handlers.add(
    "create_task",
    Handlers.utils.hasMatchingTag("Action", "CreateTask"),
    create_task
)

Handlers.add(
    "update_task",
    Handlers.utils.hasMatchingTag("Action", "UpdateTask"),
    update_task
)

Handlers.add(
    "start_task",
    Handlers.utils.hasMatchingTag("Action", "StartTask"),
    start_task
)

Handlers.add(
    "complete_task",
    Handlers.utils.hasMatchingTag("Action", "CompleteTask"),
    complete_task
)

Handlers.add(
    "cancel_task",
    Handlers.utils.hasMatchingTag("Action", "CancelTask"),
    cancel_task
)

Handlers.add(
    "create_task",
    Handlers.utils.hasMatchingTag("Action", "CreateTask"),
    create_task
)

Handlers.add(
    "update_task",
    Handlers.utils.hasMatchingTag("Action", "UpdateTask"),
    update_task
)


Handlers.add(
    "get_sage_instance",
    Handlers.utils.hasMatchingTag("Action", "GetSagaInstance"),
    function(msg, env, response)
        local cmd = json.decode(msg.Data)
        local saga_id = cmd.saga_id
        local s = entity_coll.get(SagaInstances, saga_id)
        messaging.respond(true, s, msg)
    end
)


Handlers.add(
    "get_sage_id_sequence",
    Handlers.utils.hasMatchingTag("Action", "GetSagaIdSequence"),
    function(msg, env, response)
        messaging.respond(true, SagaIdSequence, msg)
    end
)


